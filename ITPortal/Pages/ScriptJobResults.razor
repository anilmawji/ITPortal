@attribute [Route(PageRoute.ScriptJobResults)]
@attribute [Authorize]

@implements IDisposable

@inject IScriptJobService ScriptJobService
@inject NavigationManager NavigationManager

<PageContainer Title="PowerShell Job Results">
    <style>
        /* Correct MudTable border */
        .mud-table {
            border-radius: 8px;
            border: solid 1px #D2D2D2;
        }

        /* Correct MudTable height and color */
        .mud-table-toolbar {
            --mud-internal-toolbar-height: 48px !important;
        }
    </style>

    <div class="table-container">
        <MudTable T="ScriptJobResult" Items=@ScriptJobService.JobResults Dense="true" Hover="true" FixedHeader="true"
                  Filter="new Func<ScriptJobResult, bool>(FilterJobResultFunc)" OnRowClick=@GoToJobResults Height="calc(100% - 90px - 10px);">
            <ToolBarContent>
                <MudTextField @bind-Value=@_searchString Placeholder=@($"Search {ScriptJobService.JobResults.Count} items...") Adornment="Adornment.Start"
                              AdornmentIcon=@Icons.Material.Filled.Search IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="padding-left: 30px">
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.Id)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.ScriptName)">Script</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.DeviceName)">Device</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.ExecutionState)">Status</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.ExecutionTime)">Execution Time</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTh DataLabel="Id" Style="padding-left: 30px">@context.Id</MudTh>
                <MudTh DataLabel="Script">@context.ScriptName</MudTh>
                <MudTh DataLabel="Device">@context.DeviceName</MudTh>
                <MudTh DataLabel="Status">
                    <ScriptExecutionStateChipText Result=@context />
                </MudTh>
                <MudTh DataLabel="ExecutionTime">@context.ExecutionTime</MudTh>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions=@s_pageSizeOptions />
            </PagerContent>
        </MudTable>
    </div>
</PageContainer>

@code {
    private static readonly int[] s_pageSizeOptions = { 10, 20, 30 };

    private string _searchString = "";

    protected override void OnInitialized()
    {
        foreach (ScriptJobResult result in ScriptJobService.JobResults)
        {
            result.ExecutionResultReceived += OnExecutionResultReceived;
        }
    }

    private void OnExecutionResultReceived(object sender, ScriptExecutionState newState) => this.StateHasChanged();

    private void GoToJobResults(TableRowClickEventArgs<ScriptJobResult> eventArgs)
    {
        NavigationManager.NavigateTo(PageRoute.ScriptJobResultDetailsWithId(eventArgs.Item.Id));
    }

    private bool FilterJobResultFunc(ScriptJobResult result) => DoFilterJobResultFunc(result, _searchString);

    private bool DoFilterJobResultFunc(ScriptJobResult result, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString)
                    || result.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || result.ScriptName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || result.ExecutionState.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        foreach (ScriptJobResult result in ScriptJobService.JobResults)
        {
            result.ExecutionResultReceived -= OnExecutionResultReceived;
        }
    }
}
