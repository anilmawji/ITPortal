@page "/job-results"

@implements IDisposable

@inject IScriptJobService ScriptJobService
@inject NavigationManager NavigationManager

<PageContainer Title="PowerShell Job Results">
    <style>
        /* Correct MudTable border */
        .mud-table {
            border-radius: 8px;
            border: solid 1px #D2D2D2;
        }

        /* Correct MudTable height and color */
        .mud-table-toolbar {
            --mud-internal-toolbar-height: 48px !important;
        }
    </style>

    <div class="table-container">
        <MudTable T="ScriptJobResult" Items="@ScriptJobService.JobResults" Dense="true" Hover="true" FixedHeader="true"
                  Filter="new Func<ScriptJobResult, bool>(FilterJobResultFunc)" OnRowClick="GoToViewJob" Height="calc(100% - 90px - 10px);">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="@($"Search {ScriptJobService.JobResults.Count} items...")" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="padding-left: 30px">
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.Id)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.ScriptName)">Script</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.ExecutionState)">Status</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJobResult, object>(x=>x.ExecutionTime)">Execution Time</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTh DataLabel="Id" Style="padding-left: 30px">@context.Id</MudTh>
                <MudTh DataLabel="Script">@context.ScriptName</MudTh>
                <MudTh DataLabel="Status">
                    <ChipText Color="@context.ExecutionState.GetColor()" Text="@context.ExecutionState.ToString()" />
                </MudTh>
                <MudTh DataLabel="ExecutionTime">@context.ExecutionTime</MudTh>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@_pageSizeOptions" />
            </PagerContent>
        </MudTable>
    </div>
</PageContainer>

@code {
    private static readonly int[] _pageSizeOptions = { 10, 20, 30 };

    private string _searchString = "";

    protected override void OnInitialized()
    {
        foreach (ScriptJobResult result in ScriptJobService.JobResults)
        {
            result.OnExecutionResultReceived += (object sender, ScriptExecutionState newState) =>
            {
                InvokeAsync(() => this.StateHasChanged());
            };
        }
    }

    private void GoToViewJob(TableRowClickEventArgs<ScriptJobResult> eventArgs)
    {
        NavigationManager.NavigateTo($"job-results/{eventArgs.Item.Id}");
    }

    private bool FilterJobResultFunc(ScriptJobResult result) => DoFilterJobResultFunc(result, _searchString);

    private bool DoFilterJobResultFunc(ScriptJobResult result, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString)
                    || result.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || result.ScriptName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || result.ExecutionState.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        foreach (ScriptJobResult result in ScriptJobService.JobResults)
        {
            result.DisposeOnExecutionResultReceivedEventSubscriptions();
        }
    }
}
