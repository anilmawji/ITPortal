@page "/jobs"

@using Microsoft.AspNetCore.Authorization;
@using ITPortal.Lib.Services.Automation.JobTest;
@using ITPortal.Lib.Services.Automation.Script;

@inject IScriptOutputStreamService PowerShellService
@inject NavigationManager NavigationManager

@*@attribute [Authorize]*@

<h1 class="page-title">PowerShell Jobs</h1>

<style>
    /*Workaround to make MudTable resize with window*/
    .fixed-size-container {
        margin-left: 20px;
        margin-right: 20px;
        height: calc(100vh - 90px - 30px);
        display: grid;
        grid-template-columns: minmax(0,1fr);
        grid-template-rows: minmax(0,1fr);
    }

    /*Correct MudTable height*/
    .mud-table-toolbar {
        --mud-internal-toolbar-height: 48px !important;
    }

    .mud-table-head {
        --mud-palette-surface: #f5f5f5 !important;
    }
</style>

<!-- But instead it just overflows -->
<div class="fixed-size-container">
    <MudTable Items="@_jobList" Dense="true" Hover="true" FixedHeader="true" OnRowClick="RowClickEvent"
              T="ScriptJob" Filter="new Func<ScriptJob, bool>(FilterFunc)" Height="calc(100% - 90px - 10px);">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 100px;" />
            <col style="width: 100px;" />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Id)">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Script.Name)">Script</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Description)">Description</MudTableSortLabel>
            </MudTh>
            <MudTh Style="text-align:right">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="color:white" @onclick="NewJobClickEvent">New Job</MudButton>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTh DataLabel="id">@context.Id</MudTh>
            <MudTh DataLabel="script">@context.Script.Name</MudTh>
            <MudTh DataLabel="description">@context.Description</MudTh>
            <MudTh DataLabel="" Style="text-align:right">
                <MudButton Style="width:20px !important;">🗙</MudButton>
            </MudTh>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="@_pageSizeOptions" />
        </PagerContent>
    </MudTable>
</div>

@code {
    private List<ScriptJob> _jobList = new();
    private PowerShellScript _testScript;
    private string _searchString = "";

    private readonly int[] _pageSizeOptions = { 10, 20 };

    protected override async Task OnInitializedAsync()
    {
        _testScript = new PowerShellScript(PowerShellService);
        _testScript.Load("C:\\Users\\mawji\\OneDrive\\Desktop\\block_test.ps1");

        for (int i = 0; i < 20; i++)
        {
            _jobList.Add(new ScriptJob(
                Guid.NewGuid().ToString().Substring(0, 5),
                _testScript
            ));
        }

        //List<string> guids = new();

        //for (int i = 0; i < 1000; i++)
        //{
        //    string g = Guid.NewGuid().ToString().Substring(0, 5);

        //    for (int y = 0; y < guids.Count(); y++)
        //    {
        //        if (guids.ElementAt(y) == g)
        //        {
        //            System.Diagnostics.Debug.WriteLine("Found dupe: " + g);
        //        }
        //    }
        //    guids.Add(g);
        //}
    }

    private void NewJobClickEvent()
    {
        NavigationManager.NavigateTo("/new-job");
    }

    private void RowClickEvent(TableRowClickEventArgs<ScriptJob> tableRowClickEventArgs)
    {
        System.Diagnostics.Debug.WriteLine("Clicked list item");
    }

    //private bool FilterFunc1(ScriptJob job) => FilterFunc(job, _searchString);

    private bool FilterFunc(ScriptJob job)
    {
        return string.IsNullOrWhiteSpace(_searchString)
                    || job.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Script.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }
}
