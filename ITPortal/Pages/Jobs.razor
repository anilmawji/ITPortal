@page "/jobs"

@using Microsoft.AspNetCore.Authorization;
@using ITPortal.Lib.Services.Automation.Job;
@using ITPortal.Lib.Services.Automation.Script;

@inject IScriptOutputStreamService PowerShellService
@inject NavigationManager NavigationManager

@*@attribute [Authorize]*@

<div class="main-content-container">
    <h1 class="page-title">PowerShell Jobs</h1>

    <style>
        /*Workaround to make MudTable resize with window*/
        .fixed-size-container {
            height: calc(100vh - 90px - 110px);
            display: grid;
            grid-template-columns: minmax(0,1fr);
            grid-template-rows: minmax(0,1fr);
        }

        .mud-table {
            border-radius: 8px;
            border: solid 1px #D2D2D2;
        }

        /*Correct MudTable height*/
        .mud-table-toolbar {
            --mud-internal-toolbar-height: 48px !important;
        }

        .mud-table-head {
            --mud-palette-surface: #f5f5f5 !important;
        }
    </style>

    <div class="fixed-size-container">
        <MudTable Items="@_jobList" Dense="true" Hover="true" FixedHeader="true" OnRowClick="RowClickEvent"
                  T="ScriptJob" Filter="new Func<ScriptJob, bool>(FilterFunc)" Height="calc(100% - 90px - 10px);">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Id)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Script.FileName)">Script</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.DeviceName)">Device</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Description)">Description</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="color:white" @onclick="NewJobClickEvent">
                        <MudText>New Job</MudText>
                    </MudButton>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTh DataLabel="id">@context.Id</MudTh>
                <MudTh DataLabel="script">@context.Script.FileName</MudTh>
                <MudTh DataLabel="description">@context.DeviceName</MudTh>
                <MudTh DataLabel="description">@context.Description</MudTh>
                <MudTh DataLabel="" Style="text-align:right">
                    <MudButton Style="width:20px !important;">🗙</MudButton>
                </MudTh>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@_pageSizeOptions" />
            </PagerContent>
        </MudTable>
    </div>
</div>

@code {
    private List<ScriptJob> _jobList = new();
    private PowerShellScript _testScript;
    private string _searchString = "";

    private readonly int[] _pageSizeOptions = { 10, 20 };

    // Temp - for testing only
    protected override async Task OnInitializedAsync()
    {
        _testScript = new PowerShellScript(PowerShellService);
        _testScript.LoadFromFile("C:\\Users\\mawji\\OneDrive\\Desktop\\block_test.ps1");

        for (int i = 0; i < 20; i++)
        {
            _jobList.Add(new ScriptJob(
                Guid.NewGuid().ToString().Substring(0, 5),
                _testScript
            ));
        }
    }

    private void NewJobClickEvent()
    {
        NavigationManager.NavigateTo("/new-job");
    }

    private void RowClickEvent(TableRowClickEventArgs<ScriptJob> tableRowClickEventArgs)
    {
        System.Diagnostics.Debug.WriteLine("Clicked list item");
    }

    private bool FilterFunc(ScriptJob job) => DoFilterFunc(job, _searchString);

    private bool DoFilterFunc(ScriptJob job, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString)
                    || job.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Script.FileName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
}
