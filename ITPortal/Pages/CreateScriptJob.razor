@attribute [Route(PageRoutes.CreateScriptJob)]

@using ITPortal.Lib.Utils;
@using Microsoft.AspNetCore.Authorization;

@*@attribute [Authorize]*@

@inject IScriptOutputStreamService PowerShellService
@inject IScriptJobService ScriptJobService
@inject NavigationManager NavigationManager

<div class="main-content-container">
    <h1 class="page-title"><a class="jobs-link" href="/jobs">PowerShell Jobs</a> > New Job</h1>

    <PageSection Title="Script">
        <div class="choose-file-container">
            <MudButton @onclick="PickAndLoadScript" Variant="Variant.Filled" Size="Size.Small">
                <MudText>Choose File</MudText>
            </MudButton>
            @if (_psScript.IsLoaded())
            {
                <p class="file-label">
                    @_psScript.FileName
                </p>
            }
            else if (_psScript.IsUnloaded())
            {
                <p class="file-label">
                    No file selected
                </p>
            }
        </div>
        @if (_psScript.IsLoaded())
        {
            <p class="scroll script-content">
                @foreach (string line in _psScript.Content)
                {
                    @line
                    <br>
                }
            </p>
            <MudGrid Spacing="2">
                <MudItem>
                    <MudButton @onclick="EditScript" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                        <MudText>Edit</MudText>
                    </MudButton>
                </MudItem>
                <MudItem>
                    <MudButton @onclick="RefreshScript" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                        <MudText>Refresh</MudText>
                    </MudButton>
                </MudItem>
                <MudItem>
                    <MudButton @onclick="RemoveScript" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                        <MudText>Remove</MudText>
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
        else if (_psScript.LoadFailed())
        {
            <p>Script failed to load</p>
        }
    </PageSection>

    @if (_psScript.IsLoaded())
    {
        <MudForm @ref="_jobForm" @bind-IsValid="@_canCreateJob">
            <PageSection Title="Parameters">
                <div class="input-group">
                    @if (_psScript.Parameters.Count() > 0)
                    {
                        @foreach (ScriptParameter parameter in _psScript.Parameters)
                        {
                            // Cannot use two-way binding for these since parameter.Value is an object and must be casted to the correct type
                            <div class="input-line">
                                @if (parameter.DesiredType == typeof(string))
                                {
                                    <MudTextField T="string" Label="@parameter.Name" Variant="Variant.Filled" Margin="Margin.Dense" Required="@parameter.Mandatory"
                                    Text="@((string)parameter.Value)" TextChanged="(text) => parameter.Value = text" />
                                }
                                else if (parameter.DesiredType == typeof(int))
                                {
                                    <MudNumericField T="int" Label="@parameter.Name" Variant="Variant.Filled" Margin="Margin.Dense" Required="@parameter.Mandatory"
                                    Value="@((int)parameter.Value)" ValueChanged="(num) => parameter.Value = num" />
                                }
                                else if (parameter.DesiredType == typeof(bool))
                                {
                                    <MudSwitch T="bool" Label="@parameter.Name" Required="@parameter.Mandatory" Color="Color.Secondary"
                                    Checked="@((bool)parameter.Value)" CheckedChanged="(checkedValue) => parameter.Value = checkedValue" />
                                }
                                else if (parameter.DesiredType == typeof(DateTime))
                                {
                                    // No need to explicitly update "date" since it references parameter.Value which is being updated every time the date changes
                                    DateTime date = (DateTime)parameter.Value;
                                    TimeSpan time = date.TimeOfDay;

                                    <div class="mud-date">
                                        <MudDatePicker Label="@parameter.Name" Variant="Variant.Filled" Margin="Margin.Dense" Required="@parameter.Mandatory" PickerVariant="PickerVariant.Inline"
                                        Date="@date" DateChanged="(newDate) => OnDateChanged((DateTime)newDate, time, parameter)" />
                                    </div>
                                    <MudTimePicker Label="@parameter.Name" Variant="Variant.Filled" Margin="Margin.Dense" AmPm="true" Time="@time" TimeChanged="(newTime) => time = OnTimeChanged((TimeSpan)newTime, date, parameter)" />
                                }
                                else if (parameter.DesiredType == typeof(string[]))
                                {
                                    <MudExtensions.MudChipField T="string" Label="@parameter.Name" Margin="Margin.Dense" Required="@parameter.Mandatory" Values="@((List<string>)parameter.Value)"
                                    Delimiter="_delimiter" FullWidth="_fullWidth" ChipColor="_color" ChipVariant="_chipVariant" ChipSize="_chipSize" WrapChips="_wrapChips"
                                    ChipsMaxWidth="_chipsMaxWidth" Closeable="_closeable" Variant="_variant" />
                                }
                                else if (parameter.DesiredType == typeof(int[]))
                                {
                                    <MudExtensions.MudChipField T="int" Label="@parameter.Name" Margin="Margin.Dense" Required="@parameter.Mandatory" Values="@((List<string>)parameter.Value)"
                                    Delimiter="_delimiter" FullWidth="_fullWidth" ChipColor="_color" ChipVariant="_chipVariant" ChipSize="_chipSize"
                                    WrapChips="_wrapChips" ChipsMaxWidth="_chipsMaxWidth" Closeable="_closeable" Variant="_variant" />
                                }
                                else if (parameter.DesiredType == typeof(bool[]))
                                {
                                    <MudExtensions.MudChipField T="bool" Label="@parameter.Name" Margin="Margin.Dense" Required="@parameter.Mandatory" Values="@((List<string>)parameter.Value)"
                                    Delimiter="_delimiter" FullWidth="_fullWidth" ChipColor="_color" ChipVariant="_chipVariant" ChipSize="_chipSize"
                                    WrapChips="_wrapChips" ChipsMaxWidth="_chipsMaxWidth" Closeable="_closeable" Variant="_variant" />
                                }
                                else
                                {
                                    <p>Parameter @parameter.Name is not supported</p>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p>This script does not accept any parameters</p>
                    }
                </div>
            </PageSection>

    @*        <PageSection Title="Schedule">

            </PageSection>*@

            <PageSection Title="Job Details">
                <div class="input-group">
                    <div class="input-line">
                        <MudSelect T="string" @bind-Value="_psJob.DeviceName" Label="Device" Variant="Variant.Filled" Margin="Margin.Dense" Required="true">
                            <MudSelectItem Value=@("Localhost") />
                        </MudSelect>
                    </div>
                    <div class="input-line">
                        <MudTextField @bind-Value="_psJob.Description" Label="Description" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                    </div>
                </div>
                <div class="job-checkbox">
                    <MudCheckBox @bind-Checked="@_shouldViewJob" Color="Color.Secondary">View Job</MudCheckBox>
                </div>
                <MudGrid Spacing="2">
                    <MudItem>
                        <MudButton @onclick="CancelJobCreation" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Cancel</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick="SaveJob" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Done</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </PageSection>
        </MudForm>
    }
</div>

@code {
    private readonly char _delimiter = ' ';
    private readonly int _chipsMaxWidth = 80;
    private readonly Color _color = Color.Default;
    private readonly Variant _chipVariant = Variant.Text;
    private readonly Variant _variant = Variant.Filled;
    private readonly Size _chipSize = Size.Medium;
    private readonly bool _fullWidth = true;
    private readonly bool _wrapChips = true;
    private readonly bool _closeable = true;

    private MudForm _jobForm;
    private FilePickerFileType _psFileType;
    private PickOptions _filePickOptions;
    private AutomationScript _psScript;
    private ScriptJob _psJob;

    private readonly int _jobIdLength = 5;
    private bool _shouldViewJob;
    private bool _canCreateJob;

    protected override void OnInitialized()
    {
        _psFileType = new(new Dictionary<DevicePlatform, IEnumerable<string>>
            {
                { DevicePlatform.WinUI, new[] { ".ps1" } },
                { DevicePlatform.macOS, new[] { "ps1" } }
            }
        );
        _filePickOptions = new()
        {
            // PickerTitle is used by macOS but not Windows - unreliable for providing information to user
            PickerTitle = "Please select a PowerShell script file",
            FileTypes = _psFileType,
        };
        _psScript = new PowerShellScript(PowerShellService);
        _psJob = ScriptJobService.NewJob(_psScript, "Localhost", string.Empty, _jobIdLength);

        PowerShellService.OutputChanged += (object sender, List<ScriptOutputMessage> newOutput) =>
        {
            InvokeAsync(() => this.StateHasChanged());
        };
    }

    private void OnDateChanged(DateTime newDate, TimeSpan time, ScriptParameter parameter)
    {
        parameter.Value = newDate.Date.Add(time);
    }

    private TimeSpan OnTimeChanged(TimeSpan newTime, DateTime date, ScriptParameter parameter)
    {
        parameter.Value = date.Date.Add(newTime);

        return newTime;
    }

    private async void PickAndLoadScript()
    {
        var fileResult = await FilePickerHandler.PickFile(_filePickOptions);

        if (fileResult != null)
        {
            _psScript.LoadFromFile(fileResult.FullPath);

            this.StateHasChanged();
        }
    }

    private void EditScript()
    {
        if (!_psScript.IsLoaded()) return;

        FileHandler.OpenFileWithDefaultProgram(_psScript.FilePath);
    }

    private void RefreshScript()
    {
        if (_psScript.Refresh())
        {
            this.StateHasChanged();
        }
    }

    private void RemoveScript()
    {
        _psScript.Unload();

        this.StateHasChanged();
    }

    private void CancelJobCreation()
    {
        NavigationManager.NavigateTo(PageRoutes.ScriptJobs);
    }

    private void SaveJob()
    {
        _jobForm.Validate();

        if (_canCreateJob)
        {
            ScriptJobService.RegisterJob(_psJob);
            NavigationManager.NavigateTo(PageRoutes.ScriptJobs);
        }
    }
}
