@page "/create-job"
@page "/create-job/{Id:int}"

@using ITPortal.Lib.Utils;
@using Microsoft.AspNetCore.Authorization;

@*@attribute [Authorize]*@

@inject IScriptOutputStreamService PowerShellService
@inject IScriptJobService ScriptJobService
@inject NavigationManager NavigationManager

<div class="main-content-container create-job-container">
    <h1 class="page-title">
        <a class="jobs-link" href="/jobs">PowerShell Jobs</a>
        <span> > </span>
        @if (_creatingNewJob)
        {
            <span>New Job</span>
        }
        else
        {
            <span>Edit Job @Id</span>
        }
    </h1>

    <MudForm @ref="_jobForm" @bind-IsValid="@_canSaveJob" @bind-Errors="@_errors">
        <PageSection Title="Script">
            <div class="choose-file-container">
                <MudButton @onclick="PickAndLoadScript" Variant="Variant.Filled" Size="Size.Small">
                    <MudText>Choose File</MudText>
                </MudButton>
                @if (_job.Script.IsLoaded())
                {
                    <p class="file-label">
                        @_job.Script.FileName
                    </p>
                }
                else if (_job.Script.IsUnloaded())
                {
                    <p class="file-label">
                        No file selected
                    </p>
                }
            </div>
            @if (_job.Script.IsLoaded())
            {
                <p class="scroll script-content">
                    @foreach (string line in _job.Script.Content)
                    {
                        @line
                        <br>
                    }
                </p>
                <MudGrid Spacing="2">
                    <MudItem>
                        <MudButton @onclick="EditScript" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Edit</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick="RefreshScript" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Refresh</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick="RemoveScript" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Remove</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }
            else if (_job.Script.LoadFailed())
            {
                <p>Script failed to load</p>
            }
        </PageSection>

        @if (_job.Script.IsLoaded())
        {
            <PageSection Title="Parameters">
                <div class="input-group">
                    @if (_job.Script.Parameters.Count() > 0)
                    {
                        @foreach (ScriptParameter parameter in _job.Script.Parameters)
                        {
                            string requiredError = "The " + parameter.Name + " field is required.";

                            // Cannot use two-way binding for these since parameter.Value is an object and must be casted to the correct type
                            @if (parameter.DesiredType == typeof(string))
                            {
                                // Provide a larger input field depending on the parameter name
                                int numLines = 1;
                                foreach (string trigger in _extendedInputFieldTriggers)
                                {
                                    if (parameter.Name.Equals(trigger, StringComparison.OrdinalIgnoreCase))
                                    {
                                        numLines = 10;
                                        break;
                                    }
                                }
                                <div class="input-line">
                                    <MudTextField T="string" Label="@parameter.Name" Lines="@numLines" Variant="Variant.Filled" Margin="Margin.Dense"
                                        Required="@parameter.Mandatory" Text="@((string)parameter.Value)" TextChanged="(text) => parameter.Value = text"
                                        RequiredError="@requiredError" />
                                </div>
                            }
                            else if (parameter.DesiredType == typeof(int))
                            {
                                <div class="small-input-line">
                                    <MudNumericField T="int" Label="@parameter.Name" Variant="Variant.Filled" Margin="Margin.Dense" Required="@parameter.Mandatory"
                                        Value="@((int)parameter.Value)" ValueChanged="(num) => parameter.Value = num" RequiredError="@requiredError" />
                                </div>
                            }
                            else if (parameter.DesiredType == typeof(bool))
                            {
                                <div class="small-input-line">
                                    <MudSwitch T="bool" Label="@parameter.Name" Required="@parameter.Mandatory" Color="Color.Secondary"
                                        Checked="@((bool)parameter.Value)" CheckedChanged="(checkedValue) => parameter.Value = checkedValue" RequiredError="@requiredError" />
                                </div>
                            }
                            else if (parameter.DesiredType == typeof(DateTime))
                            {
                                // No need to explicitly update "date" since it references parameter.Value which is being updated every time the date changes
                                DateTime date = (DateTime)parameter.Value;
                                TimeSpan time = date.TimeOfDay;

                                <div class="small-input-line mud-date">
                                    <MudDatePicker Label="@parameter.Name" Variant="Variant.Filled" Margin="Margin.Dense" Required="@parameter.Mandatory"
                                        PickerVariant="PickerVariant.Inline" Date="@date" DateChanged="(newDate) => OnDateChanged((DateTime)newDate, time, parameter)"
                                        RequiredError="@requiredError" />
                                    <MudTimePicker Label="@parameter.Name" Variant="Variant.Filled" Margin="Margin.Dense" AmPm="true" Time="@time"
                                        TimeChanged="(newTime) => time = OnTimeChanged((TimeSpan)newTime, date, parameter)" RequiredError="@requiredError" />
                                </div>
                            }
                            else if (parameter.DesiredType == typeof(string[]))
                            {
                                <div class="input-line">
                                    <MudExtensions.MudChipField T="string" Label="@parameter.Name" Margin="Margin.Dense" Required="@parameter.Mandatory"
                                        Values="@((List<string>)parameter.Value)" Delimiter="_delimiter" FullWidth="_fullWidth" ChipColor="_color"
                                        ChipVariant="_chipVariant" ChipSize="_chipSize" WrapChips="_wrapChips" ChipsMaxWidth="_chipsMaxWidth" Closeable="_closeable"
                                        Variant="_variant" RequiredError="@requiredError" />
                                </div>
                            }
                            else if (parameter.DesiredType == typeof(int[]))
                            {
                                <div class="input-line">
                                    <MudExtensions.MudChipField T="int" Label="@parameter.Name" Margin="Margin.Dense" Required="@parameter.Mandatory"
                                        Values="@((List<string>)parameter.Value)" Delimiter="_delimiter" FullWidth="_fullWidth" ChipColor="_color"
                                        ChipVariant="_chipVariant" ChipSize="_chipSize" WrapChips="_wrapChips" ChipsMaxWidth="_chipsMaxWidth" Closeable="_closeable"
                                        Variant="_variant" RequiredError="@requiredError" />
                                </div>
                            }
                            else if (parameter.DesiredType == typeof(bool[]))
                            {
                                <div class="input-line">
                                    <MudExtensions.MudChipField T="bool" Label="@parameter.Name" Margin="Margin.Dense" Required="@parameter.Mandatory"
                                        Values="@((List<string>)parameter.Value)" Delimiter="_delimiter" FullWidth="_fullWidth" ChipColor="_color"
                                        ChipVariant="_chipVariant" ChipSize="_chipSize" WrapChips="_wrapChips" ChipsMaxWidth="_chipsMaxWidth" Closeable="_closeable"
                                        Variant="_variant" RequiredError="@requiredError" />
                                </div>
                            }
                            else
                            {
                                <p>Parameter @parameter.Name is not supported</p>
                            }
                        }
                    }
                    else
                    {
                        <p>This script does not accept any parameters</p>
                    }
                </div>
            </PageSection>
        }

        <PageSection Title="Schedule">

        </PageSection>

        <PageSection>
            <div class="input-group job-details">
                <div class="input-line">
                    <MudSelect T="string" @bind-Value="_job.DeviceName" Label="Device" Variant="Variant.Filled" Margin="Margin.Dense" Required="true">
                        <MudSelectItem Value=@_localhostDevice RequiredError="Device name field is required." />
                    </MudSelect>
                </div>
                <div class="input-line">
                    <MudCheckBox @bind-Checked="@_shouldViewJob" Color="Color.Secondary">View Job</MudCheckBox>
                </div>
            </div>
            <div class="create-job-buttons">
                <MudGrid Spacing="2">
                    <MudItem>
                        <MudButton @onclick="GoToJobs" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Cancel</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick="TrySaveJob" Variant="Variant.Filled" Color="Color.Secondary" Style="color:white" Disabled="!_job.Script.IsLoaded()">
                            <MudText>Done</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </div>
            @if (_errors.Count() > 0)
            {
                <MudText Typo="Typo.subtitle2">
                    @($"Errors ({_errors.Length})")
                </MudText>
                @foreach (var error in _errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            }
        </PageSection>
    </MudForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private readonly char _delimiter = ' ';
    private readonly int _chipsMaxWidth = 80;
    private readonly Color _color = Color.Default;
    private readonly Variant _chipVariant = Variant.Text;
    private readonly Variant _variant = Variant.Filled;
    private readonly Size _chipSize = Size.Medium;
    private readonly bool _fullWidth = true;
    private readonly bool _wrapChips = true;
    private readonly bool _closeable = true;

    private MudForm _jobForm;
    private string[] _errors = { };
    private string[] _extendedInputFieldTriggers = { "body", "description", "message" };

    private FilePickerFileType _allowedFileTypes;
    private PickOptions _filePickOptions;
    private ScriptJob _job;

    private const string _localhostDevice = "Localhost";
    private const int _jobIdLength = 5;
    private bool _creatingNewJob;
    private bool _shouldViewJob;
    private bool _canSaveJob;

    protected override void OnInitialized()
    {
        _allowedFileTypes = new(new Dictionary<DevicePlatform, IEnumerable<string>>
            {
                { DevicePlatform.WinUI, new[] { ".ps1" } },
                { DevicePlatform.macOS, new[] { "ps1" } }
            }
        );
        _filePickOptions = new()
        {
            // PickerTitle is used by macOS but not Windows - unreliable for providing information to user
            PickerTitle = "Please select a PowerShell script file",
            FileTypes = _allowedFileTypes,
        };

        if (Id == null)
        {
            _creatingNewJob = true;
            _job = ScriptJobService.NewJob(new PowerShellScript(PowerShellService), _localhostDevice);
            Id = _job.Id;
        }
        else
        {
            _job = ScriptJobService.GetJobOrDefault((int)Id);
        }

        PowerShellService.OutputChanged += (object sender, List<ScriptOutputMessage> newOutput) =>
        {
            InvokeAsync(() => this.StateHasChanged());
        };
    }

    private void OnDateChanged(DateTime newDate, TimeSpan time, ScriptParameter parameter)
    {
        parameter.Value = newDate.Date.Add(time);
    }

    private TimeSpan OnTimeChanged(TimeSpan newTime, DateTime date, ScriptParameter parameter)
    {
        parameter.Value = date.Date.Add(newTime);

        return newTime;
    }

    private async void PickAndLoadScript()
    {
        FileResult fileResult = await FilePickerHandler.PickFile(_filePickOptions);

        if (fileResult != null)
        {
            _job.Script.LoadFromFile(fileResult.FullPath);

            this.StateHasChanged();
        }
    }

    private void EditScript()
    {
        if (!_job.Script.IsLoaded()) return;

        FileHandler.OpenFileWithDefaultProgram(_job.Script.FilePath);
    }

    private void RefreshScript()
    {
        if (_job.Script.Refresh())
        {
            this.StateHasChanged();
        }
    }

    private void RemoveScript()
    {
        _job.Script.Unload();

        this.StateHasChanged();
    }

    private void GoToJobs()
    {
        NavigationManager.NavigateTo("/jobs");
    }

    private void TrySaveJob()
    {
        _jobForm.Validate();

        if (_canSaveJob)
        {
            if (_creatingNewJob)
            {
                ScriptJobService.RegisterJob(_job);
            }
            NavigationManager.NavigateTo(_shouldViewJob ? $"job-results/{_job.Id}" : "/jobs");
        }
    }
}
