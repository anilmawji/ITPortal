@attribute [Route(PageRoute.CreateScriptJob)]
@attribute [Route(PageRoute.EditScriptJob)]

@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;

@*@attribute [Authorize]*@

@inject IScriptJobService ScriptJobService
@inject NavigationManager NavigationManager

<PageContainer Title="PowerShell Jobs" NestedTitle=@_headerTitle PreviousPage="/jobs">
    <MudForm @ref=@_jobForm @bind-IsValid=@_canSaveJob @bind-Errors=@_errors>
        <PageSection Title="Job Details">
            <div class="input-line">
                <MudTextField T="string" @bind-Value=@_newJobName Label="Name" Variant="Variant.Filled" Margin="Margin.Dense"
                              Validation=@(new Func<string, IEnumerable<string>>(ValidateJobName)) Placeholder=@_initialJobName />
            </div>
            <div class="input-line">
                <MudTextField T="string" @bind-Value=@_job.Description Label="Description" Variant="Variant.Filled" Margin="Margin.Dense"
                              Validation=@(new Func<string, IEnumerable<string>>(ValidateJobDescription))/>
            </div>
        </PageSection>

        <PageSection Title="Script">
            <ChooseFileButton OnClick=@PickAndLoadScript FileName=@(_job.Script.IsLoaded() ? _job.Script.FileName : null) />

            @if (_job.Script.IsLoaded())
            {
                <p class="scroll script-content">
                    @foreach (string line in _job.Script.Content)
                    {
                        @line
                        <br>
                    }
                </p>
                <MudGrid Spacing="2">
                    <MudItem>
                        <MudButton @onclick=@RefreshScript Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Refresh</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick=@EditScript Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Edit</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick=@RemoveScript Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Remove</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }
            else if (_job.Script.LoadFailed())
            {
                <p>Script failed to load</p>
            }
        </PageSection>

        @if (_job.Script.IsLoaded())
        {
            <PageSection Title="Parameters">
                <div class="input-group">
                    @if (_job.Script.Parameters.Any())
                    {
                        @foreach (ScriptParameter parameter in _job.Script.Parameters)
                        {
                            string parameterName = parameter.Name.FirstCharToUpper();
                            string requiredError = parameterName + " is a required field";

                            // Cannot use two-way binding for these since parameter.Value is an object and must be casted to the correct type
                            @if (parameter.IsType(typeof(string)))
                            {
                                // Provide a larger input field depending on the name of the parameter
                                int numLines = ParameterRequiresExendedInputField(parameter) ? 10 : 1;

                                <div class="input-line">
                                    <MudTextField T="string" Label=@parameterName Lines=@numLines Variant="Variant.Filled" Margin="Margin.Dense"
                                                  Required=@parameter.Mandatory Text=@((string)parameter.Value) TextChanged="(text) => parameter.Value = text"
                                                  RequiredError=@requiredError />
                                </div>
                            }
                            else if (parameter.IsType(typeof(int)))
                            {
                                <div class="small-input-line">
                                    <MudNumericField T="int" Label=@parameterName Variant="Variant.Filled" Margin="Margin.Dense" Required=@parameter.Mandatory
                                                     Value=@((int)parameter.Value) ValueChanged="(num) => parameter.Value = num"
                                                     RequiredError=@requiredError />
                                </div>
                            }
                            // Avoid importing System.Management.Automation to dodge name conflict between SwitchParameter and ParameterAttribute
                            else if (parameter.IsType(typeof(bool)) || parameter.IsType(typeof(System.Management.Automation.SwitchParameter)))
                            {
                                <div class="small-input-line">
                                    <MudSwitch T="bool" Label=@parameterName Required=@parameter.Mandatory Color="Color.Secondary"
                                               Checked=@((bool)parameter.Value) CheckedChanged="(checkedValue) => parameter.Value = checkedValue"
                                               RequiredError=@requiredError />
                                </div>
                            }
                            else if (parameter.IsType(typeof(DateTime)))
                            {
                                // No need to explicitly update "date" since it references parameter.Value which is being updated every time the date changes
                                DateTime date = (DateTime)parameter.Value;
                                TimeSpan time = date.TimeOfDay;

                                <div class="small-input-line mud-date">
                                    <MudDatePicker Label=@parameterName Variant="Variant.Filled" Margin="Margin.Dense" Required=@parameter.Mandatory
                                                   PickerVariant="PickerVariant.Inline" Date=@date DateChanged="(newDate) => parameter.Value = ((DateTime)newDate).Date.Add(time)"
                                                   RequiredError=@requiredError />

                                    <MudTimePicker Label=@parameterName Variant="Variant.Filled" Margin="Margin.Dense" AmPm="true" Time=@time
                                                   TimeChanged="(newTime) => {
                                                        time = (TimeSpan)newTime;
                                                        parameter.Value = date.Date.Add(time);
                                                    }"
                                                    RequiredError=@requiredError />
                                </div>
                            }
                            else if (parameter.IsType(typeof(string[])))
                            {
                                <div class="input-line">
                                    <MudExtensions.MudChipField T="string" Label=@parameterName Margin="Margin.Dense" Required=@parameter.Mandatory
                                                                Values=@((List<string>)parameter.Value) Delimiter=@Delimiter FullWidth="true" ChipColor="Color.Default"
                                                                ChipVariant="Variant.Text" ChipSize="Size.Medium" WrapChips="true" ChipsMaxWidth=@ChipsMaxWidth Closeable="true"
                                                                Variant="Variant.Filled" RequiredError=@requiredError />
                                </div>
                            }
                            else if (parameter.IsType(typeof(int[])))
                            {
                                <div class="input-line">
                                    <MudExtensions.MudChipField T="int" Label=@parameterName Margin="Margin.Dense" Required=@parameter.Mandatory
                                                                Values=@((List<string>)parameter.Value) Delimiter=@Delimiter FullWidth="true" ChipColor="Color.Default"
                                                                ChipVariant="Variant.Text" ChipSize="Size.Medium" WrapChips="true" ChipsMaxWidth=@ChipsMaxWidth Closeable="true"
                                                                Variant="Variant.Filled" RequiredError=@requiredError />
                                </div>
                            }
                            else if (parameter.IsType(typeof(bool[])))
                            {
                                <div class="input-line">
                                    <MudExtensions.MudChipField T="bool" Label=@parameterName Margin="Margin.Dense" Required=@parameter.Mandatory
                                                                Values=@((List<string>)parameter.Value) Delimiter=@Delimiter FullWidth="true" ChipColor="Color.Default"
                                                                ChipVariant="Variant.Text" ChipSize="Size.Medium" WrapChips="true" ChipsMaxWidth=@ChipsMaxWidth Closeable="true"
                                                                Variant="Variant.Filled" RequiredError=@requiredError />
                                </div>
                            }
                            else
                            {
                                <p>Parameter @parameterName uses an unsupported data type.</p>
                            }
                        }
                    }
                    else
                    {
                        <p>This script does not accept any parameters.</p>
                    }
                </div>
            </PageSection>
        }

        <PageSection>
            <ErrorList Errors="@_errors" />
            <div class="create-job-buttons">
                <MudGrid Spacing="2">
                    <MudItem>
                        <MudButton @onclick=@GoToJobs Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Cancel</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick=@TrySaveJob Variant="Variant.Filled" Color="Color.Secondary" Style="color:white" Disabled="!_job.Script.IsLoaded()">
                            <MudText>Done</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </div>
        </PageSection>
    </MudForm>
</PageContainer>

@code {
    [Parameter]
    public string JobName { get; set; }

    private static readonly FilePickerFileType s_allowedFileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
        {
            { DevicePlatform.WinUI, new[] { ".ps1" } },
            { DevicePlatform.macOS, new[] { "ps1" } }
        }
    );
    private static readonly PickOptions s_filePickOptions = new PickOptions()
    {
        // PickerTitle is used by macOS but not Windows - unreliable for providing information to user
        PickerTitle = "Please select a PowerShell script file",
        FileTypes = s_allowedFileTypes,
    };
    private static readonly string[] s_extendedInputFieldTriggers = { "body", "description", "message" };

    private const char Delimiter = ' ';
    private const int ChipsMaxWidth = 80;

    private MudForm _jobForm;
    private string _headerTitle;
    private string[] _errors = { }; 

    private ScriptJob _job;
    private string _initialJobName;
    private string _newJobName;
    private bool _creatingNewJob;
    private bool _canSaveJob;

    protected override void OnInitialized()
    {
        if (JobName == null)
        {
            _newJobName = string.Empty;
            _initialJobName = ScriptJobService.GenerateUniqueDefaultJobName();
            _job = new ScriptJob(new PowerShellScript(), _initialJobName);
            _headerTitle = "New Job";
            _creatingNewJob = true;
        }
        else
        {
            _initialJobName = JobName;
            _newJobName = _initialJobName;
            ScriptJobService.Jobs.TryGetValue(JobName, out _job);
            System.Diagnostics.Debug.WriteLine("Found job: " + _job.Name);
            _headerTitle = $"Edit Job \"{JobName}\"";
        }
    }

    private IEnumerable<string> ValidateJobName(string jobName)
    {
        // If the current job name is blank, the default job name will be used upon form submission
        if (jobName.Length < 3 && jobName.Length > 0)
        {
            yield return "Job name must be at least 3 characters in length";
        }
        if (jobName.Length > 30)
        {
            yield return "Job name must be less than 30 characters in length";
        }
        if (ScriptJobService.HasJob(jobName) && (_creatingNewJob || jobName != _initialJobName))
        {
            yield return "Job name must be unique";
        }
    }

    private IEnumerable<string> ValidateJobDescription(string jobDescription)
    {
        if (jobDescription.Length > 100)
        {
            yield return "Job description must be less than 100 characters in length";
        }
    }

    private bool ParameterRequiresExendedInputField(ScriptParameter parameter)
    {
        return s_extendedInputFieldTriggers.Contains(parameter.Name);
    }

    private async void PickAndLoadScript()
    {
        FileResult fileResult = await Utilities.FileHelper.PickFile(s_filePickOptions);

        if (fileResult != null)
        {
            _job.Script.LoadFromFile(fileResult.FullPath);
            this.StateHasChanged();
        }
    }

    private void EditScript()
    {
        if (!_job.Script.IsLoaded()) return;

        FileHelper.OpenFileWithDefaultProgram(_job.Script.FilePath);
    }

    private void RefreshScript()
    {
        if (_job.Script.Refresh())
        {
            this.StateHasChanged();
        }
    }

    private void RemoveScript()
    {
        _job.Script.Unload();
        this.StateHasChanged();
    }

    private void GoToJobs()
    {
        NavigationManager.NavigateTo(PageRoute.ScriptJobs);
    }

    private async Task TrySaveJob()
    {
        await _jobForm.Validate();

        if (!_canSaveJob) return;

        if (_creatingNewJob)
        {
            if (ShouldUpdateJobName())
            {
                _job.Name = _newJobName;
            }
            ScriptJobService.AddJob(_job);
        }
        else if (ShouldUpdateJobName() && FileHelper.TryDeleteAppDataFile(Path.Combine("jobs", _job.Name + ".json")))
        {
            ScriptJobService.UpdateJobName(_job, _newJobName);
        }
        FileHelper.WriteTextToAppDataFile(_job.ToJsonString(), Path.Combine("jobs", _job.Name + ".json"));

        GoToJobs();
    }

    private bool ShouldUpdateJobName()
    {
        return _newJobName != string.Empty && _newJobName != _initialJobName;
    }
}
