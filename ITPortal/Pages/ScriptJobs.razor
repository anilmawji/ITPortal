@page "/jobs"

@using Microsoft.AspNetCore.Authorization;
@using ITPortal.Lib.Services.Automation.Job;
@using ITPortal.Lib.Services.Automation.Script;

@inject IScriptOutputStreamService PowerShellService
@inject IScriptJobService ScriptJobService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@*@attribute [Authorize]*@

<div class="main-content-container">
    <h1 class="page-title">PowerShell Jobs</h1>

    <style>
        .mud-table {
            border-radius: 8px;
            border: solid 1px #D2D2D2;
        }

        /*Correct MudTable height and color */
        .mud-table-toolbar {
            --mud-internal-toolbar-height: 48px !important;
        }
    </style>

    <div class="fixed-size-container">
        <MudTable Items="@ScriptJobService.Jobs.Values" Dense="true" Hover="true" FixedHeader="true" OnRowClick="GoToViewJob"
                  T="ScriptJob" Filter="new Func<ScriptJob, bool>(FilterFunc)" Height="calc(100% - 90px - 10px);">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="@($"Search {ScriptJobService.Jobs.Values.Count} items...")" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                    <MudTh Style="padding-left: 30px">
                        <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Id)">Id</MudTableSortLabel>
                    </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Script.FileName)">Script</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Status)">Status</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.DeviceName)">Device</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right; margin-right: 50px">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="color:white" @onclick="GoToNewJob">
                        <MudText>New Job</MudText>
                    </MudButton>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTh DataLabel="id" Style="padding-left: 30px">
                    <div class="chip">
                        <div class="chip-text blue-chip">
                            @context.Id
                        </div>
                    </div>
                 </MudTh>
                <MudTh DataLabel="script">@context.Script.FileName</MudTh>
                <MudTh DataLabel="status">
                    <div class="chip">
                        <div class="chip-text @(GetJobChipClass(context.Status))">
                            @context.Status
                        </div>
                    </div>
                </MudTh>
                <MudTh DataLabel="device">@context.DeviceName</MudTh>
                <MudTh Style="text-align:right">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" Style="margin-right: 10px"
                                   OnClick="() => GoToEditJob(context.Id)"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"
                                   OnClick="() => OpenDeleteJobDialog(context.Id)"></MudIconButton>
                </MudTh>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@_pageSizeOptions" />
            </PagerContent>
        </MudTable>
    </div>
</div>

@code {
    private string _searchString = "";
    private readonly int[] _pageSizeOptions = { 10, 20, 30 };

    private readonly DialogOptions _dialogOptions = new() {
        CloseButton = true,
        DisableBackdropClick = true,
        MaxWidth = MaxWidth.ExtraSmall
    };
    private DialogParameters<Dialog> _deleteDialogParameters = new();

    protected override void OnInitialized()
    {
        _deleteDialogParameters.Add(dialog => dialog.ContentText, "Are you sure you want to delete this script job? This action cannot be undone.");
        _deleteDialogParameters.Add(dialog => dialog.ButtonText, "Delete");
        _deleteDialogParameters.Add(dialog => dialog.Color, Color.Error);
    }

    private void GoToNewJob()
    {
        NavigationManager.NavigateTo("/create-job");
    }

    private void GoToEditJob(int jobId)
    {
        NavigationManager.NavigateTo($"create-job/{jobId}");
    }

    private void GoToViewJob(TableRowClickEventArgs<ScriptJob> eventArgs)
    {
        NavigationManager.NavigateTo($"job-results/{eventArgs.Item.Id}");
    }

    private async void OpenDeleteJobDialog(int id)
    {
        IDialogReference dialog = DialogService.Show<Dialog>("Confirm Job Deletion", _deleteDialogParameters, _dialogOptions);
        DialogResult result = await dialog.Result;

        if (!result.Canceled)
        {
            ScriptJobService.DeleteJob(id);
            this.StateHasChanged();
        }
    }

    private string GetJobChipClass(ScriptJobState status)
    {
        return status == ScriptJobState.Idle || status == ScriptJobState.Running ? "grey-chip"
             : status == ScriptJobState.Succeeded ? "green-chip"
             : status == ScriptJobState.Failed ? "red-chip"
             : "grey-chip";
    }

    private bool FilterFunc(ScriptJob job) => DoFilterFunc(job, _searchString);

    private bool DoFilterFunc(ScriptJob job, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString)
                    || job.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Script.FileName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Status.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.DeviceName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
}
