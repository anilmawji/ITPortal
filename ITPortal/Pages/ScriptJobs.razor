@attribute [Route(PageRoute.ScriptJobs)]
@attribute [Authorize]

@inject IScriptJobService ScriptJobService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageContainer Title="PowerShell Jobs">
    <style>
        /* adjust table border and hide overflowing content */
        .mud-table {
            border-radius: 8px;
            border: solid 1px #D2D2D2;
            overflow: hidden;
        }

        /* correct table height and color */
        .mud-table-toolbar {
            --mud-internal-toolbar-height: 48px !important;
        }
    </style>

    <div class="table-container">
        <MudTable T="ScriptJob" Items=@ScriptJobService.JobList.GetJobs().Values Dense="true" Hover="true" FixedHeader="true"
                  Filter="new Func<ScriptJob, bool>(FilterJobFunc)" Height="calc(100% - 90px - 10px);">
            <ToolBarContent>
                <MudTextField @bind-Value=@_searchString Placeholder=@($"Search {ScriptJobService.JobList.GetJobs().Count} items...")
                              Adornment="Adornment.Start" AdornmentIcon=@Icons.Material.Filled.Search IconSize="Size.Medium" Class="mt-0" />
            </ToolBarContent>
            <HeaderContent>
                    <MudTh Style="padding-left: 30px">
                        <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Name)">Name</MudTableSortLabel>
                    </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Script.FileName)">Script</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.State)">Status</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ScriptJob, object>(x=>x.Description)">Description</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right; margin-right: 50px">
                    <div class="new-job-btn">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="color:white" @onclick=@GoToNewJob>
                            <MudText>New Job</MudText>
                        </MudButton>
                    </div>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTh DataLabel="Name" Style="padding-left: 30px">@context.Name</MudTh>
                <MudTh DataLabel="script">@context.Script.FileName</MudTh>
                <MudTh DataLabel="status">
                    <ScriptJobStateChipText Job=@context />
                </MudTh>
                <MudTh DataLabel="Description">@context.Description.NormalizeLength(40)</MudTh>
                <MudTh Style="text-align:right">
                    @if (context.State != ScriptJobState.Running)
                    {
                        <MudIconButton Icon=@Icons.Material.Filled.PlayArrow aria-label="start" Style="margin-right: 4px"
                                       OnClick="() => OpenRunJobDialog(context)" />
                        <MudIconButton Icon=@Icons.Material.Filled.Edit aria-label="edit"
                                       OnClick="() => TryGoToEditJob(context)" />
                    }
                    else
                    {
                        <MudIconButton Icon=@Icons.Material.Filled.Stop aria-label="stop" Style="margin-right: 4px"
                                       OnClick="() => OpenCancelJobDialog(context)" />
                        <MudIconButton Icon=@Icons.Material.Filled.EditOff aria-label="edit"
                                       OnClick="() => TryGoToEditJob(context)" />
                    }
                    <MudIconButton Icon=@Icons.Material.Filled.Delete aria-label="delete"
                                   OnClick="() => OpenDeleteJobDialog(context.Name)" />
                </MudTh>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions=@s_pageSizeOptions />
            </PagerContent>
        </MudTable>
    </div>
</PageContainer>

@code {
    private static readonly DialogOptions s_dialogOptions = new() {
        CloseButton = true,
        DisableBackdropClick = true,
        MaxWidth = MaxWidth.ExtraSmall
    };
    private static readonly DialogParameters<Dialog> s_deleteJobDialogParameters = new();
    private static readonly DialogParameters<RunScriptJobDialog> s_runJobDialogParameters = new();
    private static readonly DialogParameters<Dialog> s_cancelJobDialogParameters = new();
    private static readonly int[] s_pageSizeOptions = { 10, 20, 30 };

    private string _searchString = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InitializeDialogParameters();
            ScriptJobService.JobList.LoadScriptJobs(ScriptJobFileHelper.JobsPath);
            ScriptJobService.JobResultList.LoadScriptJobResults(ScriptJobFileHelper.JobResultsPath);
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void InitializeDialogParameters()
    {
        s_deleteJobDialogParameters.Add(dialog => dialog.ContentText, "Are you sure you want to delete this job? This action cannot be undone.");
        s_deleteJobDialogParameters.Add(dialog => dialog.SubmitButtonText, "Delete");
        s_deleteJobDialogParameters.Add(dialog => dialog.Color, Color.Error);

        s_runJobDialogParameters.Add(dialog => dialog.SubmitButtonText, "Done");
        s_runJobDialogParameters.Add(dialog => dialog.Color, Color.Secondary);

        s_cancelJobDialogParameters.Add(dialog => dialog.ContentText, "Are you sure you want to stop execution of this job?");
        s_cancelJobDialogParameters.Add(dialog => dialog.SubmitButtonText, "Yes");
        s_cancelJobDialogParameters.Add(dialog => dialog.CancelButtonText, "No");
        s_cancelJobDialogParameters.Add(dialog => dialog.Color, Color.Secondary);
    }

    private async void OpenRunJobDialog(ScriptJob job)
    {
        IDialogReference dialog = DialogService.Show<RunScriptJobDialog>("Run Job", s_runJobDialogParameters, s_dialogOptions);
        DialogResult dialogResult = await dialog.Result;

        if (dialogResult.Canceled) return;

        var dialogResultData = dialogResult.Data as RunScriptJobDialogResult;
        ScriptJobResult jobResult;

        if (dialogResultData.ShouldRunJobNow)
        {
            jobResult = ScriptJobService.RunJob(job, dialogResultData.DeviceName);
        }
        else
        {
            //TODO: Schedule job to run at _runDate instead
            jobResult = ScriptJobService.RunJob(job, dialogResultData.DeviceName);
        }

        if (dialogResultData.ShouldViewJobResult)
        {
            NavigationManager.NavigateTo(PageRoute.ScriptJobResultDetailsWithId(jobResult.Id));
        }
        else
        {
            this.StateHasChanged();
        }

        await jobResult.RunJobTask.ContinueWith((resultTask) =>
        {
            ScriptJobFileHelper.CreateJobResultFile(jobResult);

            if (!dialogResultData.ShouldViewJobResult)
            {
                InvokeAsync(this.StateHasChanged);
            }
        });
    }

    private async void OpenCancelJobDialog(ScriptJob job)
    {
        IDialogReference dialog = DialogService.Show<Dialog>("Confirm Job Cancellation", s_cancelJobDialogParameters, s_dialogOptions);
        DialogResult dialogResult = await dialog.Result;

        if (dialogResult.Canceled) return;

        job.Cancel();
        this.StateHasChanged();
    }

    private async void OpenDeleteJobDialog(string jobName)
    {
        IDialogReference dialog = DialogService.Show<DeleteScriptJobDialog>("Confirm Job Deletion", s_deleteJobDialogParameters, s_dialogOptions);
        DialogResult dialogResult = await dialog.Result;

        if (dialogResult.Canceled) return;

        var dialogResultData = dialogResult.Data as DeleteScriptJobDialogResult;
        ScriptJob job = ScriptJobService.JobList.TryGetJob(jobName);

        if (dialogResultData.ShouldDeleteJobResults && job != null)
        {
            DeleteJobResults(job);
        }
        DeleteJob(jobName);

        this.StateHasChanged();
    }

    private void DeleteJob(string jobName)
    {
        ScriptJobService.JobList.Remove(jobName);
        ScriptJobFileHelper.DeleteJobFile(jobName);
    }

    private void DeleteJobResults(ScriptJob job)
    {
        List<ScriptJobResult> results = ScriptJobService.JobResultList.Remove(job);

        foreach (ScriptJobResult result in results)
        {
            ScriptJobFileHelper.DeleteJobResultFile(result.Id);
        }
    }

    private void GoToNewJob()
    {
        NavigationManager.NavigateTo(PageRoute.CreateScriptJob);
    }

    private void TryGoToEditJob(ScriptJob job)
    {
        if (job.IsRunning()) return;

        NavigationManager.NavigateTo(PageRoute.EditScriptJobWithName(job.Name));
    }

    private bool FilterJobFunc(ScriptJob job) => DoFilterJobFunc(job, _searchString);

    private bool DoFilterJobFunc(ScriptJob job, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString)
                    || job.Name.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Script.FileName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.State.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || job.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
}
