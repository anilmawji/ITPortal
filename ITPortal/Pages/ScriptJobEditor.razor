@attribute [Route(PageRoute.CreateScriptJob)]
@attribute [Route(PageRoute.EditScriptJob)]
@*@attribute [Authorize]*@

@inject IScriptJobService ScriptJobService
@inject NavigationManager NavigationManager

<PageContainer Title="PowerShell Jobs" NestedTitle=@_headerTitle PreviousPage="/jobs" Description="Create or modify job properties">
    <MudForm @ref=@_jobForm @bind-IsValid=@_canSaveJob @bind-Errors=@_errors>
        <PageSection Title="Job Details">
            <div class="input-line">
                <MudTextField T="string" @bind-Value=@_newJobName Label="Name" Variant="Variant.Filled" Margin="Margin.Dense"
                              Validation=@(new Func<string, IEnumerable<string>>(ValidateJobName)) Placeholder=@_initialJobName />
            </div>
            <div class="input-line">
                <MudTextField T="string" @bind-Value=@_job.Description Label="Description" Variant="Variant.Filled" Margin="Margin.Dense"
                              Validation=@(new Func<string, IEnumerable<string>>(ValidateJobDescription))/>
            </div>
        </PageSection>

        <PageSection Title="Script">
            <div class="input-line">
                <FilePickerContainer FileName=@_job.Script.FileName>
                    <MudButton @onclick=@PickAndLoadScript Variant="Variant.Filled" Size="Size.Small">
                        <MudText>Choose File</MudText>
                    </MudButton>
                </FilePickerContainer>
            </div>

            @if (_job.Script.IsContentLoaded())
            {
                <ScriptContentView Script=@_job.Script/>
                <MudGrid Spacing="2">
                    <MudItem>
                        <MudButton @onclick=@RefreshScript Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Refresh</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick=@EditScript Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Edit</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick=@RemoveScript Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Remove</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }
        </PageSection>

        @if (_job.Script.IsContentLoaded())
        {
            <PageSection Title="Parameters">
                @if (_job.Script.Parameters.Any())
                {
                    @foreach (ScriptParameter parameter in _job.Script.Parameters)
                    {
                        <ScriptParameterView Parameter=@parameter />
                    }
                }
                else
                {
                    <p>This script does not accept any parameters.</p>
                }
            </PageSection>
        }

        <PageSection>
            <ErrorList Errors="@_errors" />
            <div class="create-job-buttons">
                <MudGrid Spacing="2">
                    <MudItem>
                        <MudButton @onclick=@GoToJobs Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                            <MudText>Cancel</MudText>
                        </MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton @onclick=@TrySaveJob Variant="Variant.Filled" Color="Color.Secondary" Style="color:white"
                                   Disabled="!_job.Script.IsContentLoaded()">
                            @if (_creatingNewJob)
                            {
                                <MudText>Done</MudText>
                            }
                            else
                            {
                                <MudText>Save</MudText>
                            }
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </div>
        </PageSection>
    </MudForm>
</PageContainer>

@code {
    [Parameter]
    public string JobName { get; set; }

    private static readonly PickOptions s_filePickOptions = new PickOptions()
    {
        // PickerTitle is used by macOS but not Windows - unreliable for providing information to user
        PickerTitle = "Please select a PowerShell script file",
        FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
        {
            { DevicePlatform.WinUI, new[] { ".ps1" } },
            { DevicePlatform.macOS, new[] { "ps1" } }
        })
    };

    private MudForm _jobForm;
    private string _headerTitle;
    private string[] _errors = { }; 

    private ScriptJob _job;
    private string _initialJobName;
    private string _newJobName;
    private bool _creatingNewJob;
    private bool _canSaveJob;

    protected override void OnInitialized()
    {
        if (JobName == null)
        {
            _newJobName = string.Empty;
            _initialJobName = ScriptJobService.JobList.GetUniqueDefaultJobName();
            _job = new ScriptJob(_initialJobName, new PowerShellScript());
            _headerTitle = "New Job";
            _creatingNewJob = true;
        }
        else
        {
            _initialJobName = JobName;
            _newJobName = _initialJobName;
            _job = ScriptJobService.JobList.TryGetJob(JobName);
            _headerTitle = $"Edit Job \"{JobName}\"";
        }
    }

    private IEnumerable<string> ValidateJobName(string jobName)
    {
        // If the current job name is blank, the default job name will be used upon form submission
        if (jobName.Length < 3 && jobName.Length > 0)
        {
            yield return "Job name must be at least 3 characters in length";
        }
        if (jobName.Length > 30)
        {
            yield return "Job name must be less than 30 characters in length";
        }
        if (ScriptJobService.JobList.HasJob(jobName) && (_creatingNewJob || jobName != _initialJobName))
        {
            yield return "Job name must be unique";
        }
        if (!jobName.IsValidFileName())
        {
            yield return "Job name must contain only letters and digits";
        }
    }

    private IEnumerable<string> ValidateJobDescription(string jobDescription)
    {
        if (jobDescription.Length > 100)
        {
            yield return "Job description must be less than 100 characters in length";
        }
    }

    private async Task PickAndLoadScript()
    {
        FileResult fileResult = await FileHelper.PickFileAsync(s_filePickOptions);

        if (fileResult == null) return;

        _job.Script.LoadContent(fileResult.FullPath);
        _job.Script.LoadParameters();
        this.StateHasChanged();
    }

    private void RefreshScript()
    {
        _job.Script.Refresh();
        this.StateHasChanged();
    }

    private void EditScript()
    {
        if (!_job.Script.IsContentLoaded()) return;

        FileHelper.OpenFileWithDefaultProgram(_job.Script.FilePath);
    }

    private void RemoveScript()
    {
        _job.Script.Unload();
        this.StateHasChanged();
    }

    private void GoToJobs()
    {
        NavigationManager.NavigateTo(PageRoute.ScriptJobs);
    }

    private async Task TrySaveJob()
    {
        await _jobForm.Validate();

        if (!_canSaveJob) return;

        if (_creatingNewJob)
        {
            ScriptJobService.JobList.Add(_job);
        }
        else
        {
            ScriptJobFileHelper.TryDeleteJobFile(_job.Name);
        }
        UpdateJobName();
        ScriptJobFileHelper.TryCreateJobFile(_job);
        GoToJobs();
    }

    private void UpdateJobName()
    {
        if (_newJobName != string.Empty && _newJobName != _initialJobName)
        {
            ScriptJobService.JobList.UpdateJobName(_job, _newJobName);
        }
    }
}
