@attribute [Route(PageRoute.ScriptJobResultDetails)]
@* @attribute [Authorize] *@

@inject NavigationManager NavigationManager

@inherits ScriptJobResultBase

<style>
    /* override default mud table colors */
    .mud-tab-slider {
        background-color: #0078D4;
    }

    .mud-tab.mud-tab-active {
        color: #0078D4;
    }

    .mud-tab .mud-badge {
        background-color: #000000 !important;
    }

    .mud-tab.mud-tab-active .mud-badge {
        background-color: #0078D4 !important;
    }
</style>

<PageContainer Title="PowerShell Job Results" NestedTitle=@($"Result {Result.Id}") PreviousPage="/job-results" Description="View execution details of a job">
    <div class="script-title">
        <p>Script: @Result.ScriptName</p>
        <ScriptExecutionStateChipText Result=@Result OnResultReceived=@(() => InvokeAsync(this.StateHasChanged))/>
    </div>
    <div class="section">
        <p>Job: @Result.JobName</p>
        <p>Device: @Result.DeviceName</p>
        <p>Execution Time: @Result.ExecutionTime</p>
    </div>
    @if (Job == null)
    {
        <div class="section">
            <MudText>Job could not be found</MudText>
        </div>
    }
    <div class="section">
        <MudGrid Spacing="2">
            <MudItem>
                <MudButton @onclick=@TryCancelJob Variant="Variant.Filled" Color="Color.Secondary"
                           Style="color:white" Disabled=@(Job == null || Result.ExecutionState != ScriptExecutionState.Running)>
                    <MudText>Cancel</MudText>
                </MudButton>
            </MudItem>
            <MudItem>
                <MudButton @onclick=@GoToEditJob Variant="Variant.Filled" Color="Color.Secondary" Style="color:white" Disabled=@(Job == null)>
                    <MudText>Edit Job</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>
    </div>
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="All Output" BadgeData=@GetOutputLineCountText(Result.ScriptOutput.GetMessages())>
            <ScriptOutputView OutputList=@Result.ScriptOutput />
        </MudTabPanel>
        @foreach ((ScriptOutputStreamType streamType, int numLines) in Result.ScriptOutput.StreamLineCounts)
        {
            if (numLines == 0) continue;

            <MudTabPanel Text=@GetTabName(streamType) Icon=@TabIcons[streamType]>
                <ScriptOutputView OutputList=@Result.ScriptOutput StreamType=@streamType />
            </MudTabPanel>
        }
    </MudTabs>
</PageContainer>

@code {
    private static readonly Dictionary<ScriptOutputStreamType, string> TabIcons = new()
    {
        { ScriptOutputStreamType.Standard,    Icons.Material.Rounded.Output              },
        { ScriptOutputStreamType.Information, Icons.Material.Rounded.Info                },
        { ScriptOutputStreamType.Progress,    Icons.Material.Rounded.AlignHorizontalLeft },
        { ScriptOutputStreamType.Warning,     Icons.Material.Rounded.Warning             },
        { ScriptOutputStreamType.Error,       Icons.Material.Rounded.Error               },
    };

    ScriptJob Job;

    protected override void OnInitialized()
    {
        // Very important to make sure ScriptJobResultBase is populated
        base.OnInitialized();

        Job = ScriptJobService.JobList.TryGetJob(Result.JobName);

        if (Result.ScriptOutput != null)
        {
            Result.ScriptOutput.OutputChanged += OnOutputChanged;
        }
    }

    private void OnOutputChanged(object sender, ScriptOutputChangedEventArgs _)
    {
        InvokeAsync(this.StateHasChanged);
    }

    private string GetTabName(ScriptOutputStreamType streamType)
    {
        if (streamType == ScriptOutputStreamType.Warning || streamType == ScriptOutputStreamType.Error)
        {
            return streamType.ToStringFast() + "S";
        }
        return streamType.ToStringFast();
    }

    private string GetOutputLineCountText(IReadOnlyList<ScriptOutputMessage> messages)
    {
        int numMessages = messages.Count;

        return numMessages <= 99 ? numMessages.ToString() : "99+";
    }

    private void TryCancelJob()
    {
        if (Job != null)
        {
            Job.Cancel();
        }
    }

    private void GoToEditJob()
    {
        NavigationManager.NavigateTo(PageRoute.EditScriptJobWithName(Job.Name));
    }

    public void Dispose()
    {
        Result.ScriptOutput.OutputChanged -= OnOutputChanged;
    }
}
