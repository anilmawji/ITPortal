@attribute [Route(PageRoute.ScriptJobResultDetails)]

@implements IDisposable

@inject NavigationManager NavigationManager

@inherits ScriptJobResultBase

<PageContainer Title="PowerShell Job Results" NestedTitle=@($"Result {Result.Id}") PreviousPage="/job-results">
    <div class="script-title">
        <p>Script: @Result.ScriptName</p>
        <div class="title-chip">
            <ChipText Color=@Result.ExecutionState.GetColor() Text=@Result.ExecutionState.ToStringFast() />
        </div>
    </div>
    <div class="job-details">
        <p>Execution Time: @Result.ExecutionTime</p>
        <p>Device: @Result.DeviceName</p>
    </div>
    <MudGrid Spacing="2">
        <MudItem>
            <MudButton @onclick=@(() => Result.Job.TryCancel()) Variant="Variant.Filled" Color="Color.Secondary"
                       Style="color:white" Disabled=@(Result.ExecutionState != ScriptExecutionState.Running)>
                <MudText>Cancel</MudText>
            </MudButton>
        </MudItem>
        <MudItem>
            <MudButton @onclick=@GoToEditJob Variant="Variant.Filled" Color="Color.Secondary" Style="color:white">
                <MudText>Edit Job</MudText>
            </MudButton>
        </MudItem>
    </MudGrid>

    <PageSection Title="Output">
        <ScriptOutputTabs ScriptOutput=@Result.ScriptOutput @ref=@OutputTabs />
    </PageSection>
</PageContainer>

@code {
    ScriptOutputTabs OutputTabs;

    protected override void OnInitialized()
    {
        // Very important to make sure ScriptJobResultBase is populated
        base.OnInitialized();

        Result.OnExecutionResultReceived += (object sender, ScriptExecutionState newState) =>
        {
            InvokeAsync(this.StateHasChanged);
        };
    }

    private void GoToEditJob()
    {
        NavigationManager.NavigateTo(PageRoute.EditScriptJobWithName(Result.Job.Name));
    }

    public void Dispose()
    {
        OutputTabs.Dispose();
        Result.DisposeOnExecutionResultReceivedEventSubscriptions();
    }
}
