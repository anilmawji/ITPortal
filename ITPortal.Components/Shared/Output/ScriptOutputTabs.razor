@implements IDisposable

<style>
    .mud-tab-slider {
        background-color: #0078D4;
    }

    .mud-tab.mud-tab-active {
        color: #0078D4;
    }

    .mud-tab .mud-badge {
        background-color: #000000 !important;
    }

    .mud-tab.mud-tab-active .mud-badge {
        background-color: #0078D4 !important;
    }
</style>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="All Output" BadgeData=@GetOutputLineCountText(ScriptOutput.GetMessages())>
        <ScriptOutputContainer OutputList=@ScriptOutput?.GetMessages() />
    </MudTabPanel>
    @if (ScriptOutput != null)
    {
        foreach ((ScriptOutputStreamType streamType, int numLines) in ScriptOutput.StreamLineCounts)
        {
            if (numLines == 0) continue;
            IReadOnlyList<ScriptOutputMessage> messages = ScriptOutput.GetMessagesFilteredByStream(streamType);

            <MudTabPanel Text=@GetTabName(streamType) Icon=@TabIcons[streamType]>
                <ScriptOutputContainer OutputList=@messages />
            </MudTabPanel>
        }
    }
</MudTabs>

@code {
    [Parameter, EditorRequired]
    public ScriptOutputList ScriptOutput { get; set; } = null!;

    private static readonly Dictionary<ScriptOutputStreamType, string> TabIcons = new()
    {
        { ScriptOutputStreamType.Standard,    Icons.Material.Rounded.Output              },
        { ScriptOutputStreamType.Information, Icons.Material.Rounded.Info                },
        { ScriptOutputStreamType.Progress,    Icons.Material.Rounded.AlignHorizontalLeft },
        { ScriptOutputStreamType.Warning,     Icons.Material.Rounded.Warning             },
        { ScriptOutputStreamType.Error,       Icons.Material.Rounded.Error               },
    };

    protected override void OnInitialized()
    {
        if (ScriptOutput != null)
        {
            ScriptOutput.OutputChanged += OnOutputChanged;
        }
    }

    private void OnOutputChanged(object? sender, ScriptOutputChangedEventArgs _)
    {
        InvokeAsync(this.StateHasChanged);
    }

    private string GetTabName(ScriptOutputStreamType streamType)
    {
        if (streamType == ScriptOutputStreamType.Warning || streamType == ScriptOutputStreamType.Error)
        {
            return streamType.ToStringFast() + "S";
        }
        return streamType.ToStringFast();
    }

    private string GetOutputLineCountText(IReadOnlyList<ScriptOutputMessage> messages)
    {
        if (ScriptOutput != null)
        {
            int numMessages = messages.Count;

            return numMessages <= 99 ? numMessages.ToString() : "99+";
        }
        return "0";
    }

    public void Dispose()
    {
        ScriptOutput.OutputChanged -= OnOutputChanged;
    }
}
