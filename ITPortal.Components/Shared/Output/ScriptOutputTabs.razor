@implements IDisposable

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="All" BadgeData="GetOutputLineCountText()" BadgeColor="Color.Primary">
        <ScriptOutputContainer OutputList=@ScriptOutput?.Get() />
    </MudTabPanel>
    @if (ScriptOutput != null)
    {
        foreach ((ScriptOutputStreamType streamType, int numLines) in ScriptOutput.UsedStreamTypes)
        {
            if (numLines == 0) continue;
            IReadOnlyList<ScriptOutputMessage> filteredOutput = ScriptOutput.GetFilteredByStreamType(streamType);

            <MudTabPanel Text="@streamType.ToString()" Icon=@TabIcons[streamType]>
                <ScriptOutputContainer OutputList=@filteredOutput />
            </MudTabPanel>
        }
    }
</MudTabs>

@code {
    [Parameter, EditorRequired]
    public ScriptOutputList? ScriptOutput { get; set; }

    private readonly Dictionary<ScriptOutputStreamType, string> TabIcons = new()
    {
        { ScriptOutputStreamType.Standard,    Icons.Material.Rounded.Output   },
        { ScriptOutputStreamType.Information, Icons.Material.Rounded.Info     },
        { ScriptOutputStreamType.Progress,    Icons.Material.Rounded.BarChart },
        { ScriptOutputStreamType.Warning,     Icons.Material.Rounded.Warning  },
        { ScriptOutputStreamType.Error,       Icons.Material.Rounded.Error    },
    };

    protected override void OnInitialized()
    {
        if (ScriptOutput != null)
        {
            ScriptOutput.OnOutputChanged += (object? sender, ScriptOutputChangedEventArgs _) =>
            {
                InvokeAsync(() => this.StateHasChanged());
            };
        }
    }

    private string GetOutputLineCountText()
    {
        if (ScriptOutput != null)
        {
            return ScriptOutput.Get().Count <= 99 ? ScriptOutput.Get().Count.ToString() : "99+";
        }
        return "0";
    }

    public void Dispose()
    {
        ScriptOutput?.DisposeOnOutputChangedEventSubscriptions();
    }
}
