@implements IDisposable

@*customize mud chip appearance*@
<style>
    .mud-chip-text.mud-chip-color-dark {
        background-color: var(--mud-palette-dark-hover);
        border: 1px solid var(--mud-palette-dark);
    }

    .mud-chip-text.mud-chip-color-secondary {
        background-color: var(--mud-palette-secondary-hover);
        border: 1px solid var(--mud-palette-secondary);
    }

    .mud-chip-text {
        margin-left: 0;
        margin-right: 0;
    }
</style>

@if (Job.State != ScriptJobState.Idle)
{
    <MudChip Variant="Variant.Text" Size="Size.Medium" Icon=@GetIcon() Label="true" Color=@GetColor()>
        @Job.State.ToStringFast()
    </MudChip>
}
else
{
    <MudChip Variant="Variant.Text" Size="Size.Medium" Label="true" Color=@GetColor()>
        @Job.State.ToStringFast()
    </MudChip>
}

@code {
    [Parameter, EditorRequired]
    public ScriptJob Job { get; set; } = null!;

    private static readonly IReadOnlyDictionary<ScriptJobState, MudBlazor.Color> MudColorMap = new Dictionary<ScriptJobState, MudBlazor.Color>()
    {
        { ScriptJobState.Idle,      Color.Dark      },
        { ScriptJobState.Scheduled, Color.Dark      },
        { ScriptJobState.Running,   Color.Secondary }
    };

    private static readonly IReadOnlyDictionary<ScriptJobState, string> MudIconMap = new Dictionary<ScriptJobState, string>()
    {
        { ScriptJobState.Scheduled, Icons.Material.Outlined.CalendarMonth },
        { ScriptJobState.Running,   Icons.Material.Outlined.AccessTime    }
    };

    protected override void OnInitialized()
    {
        Job.StateChanged += OnStateChanged;
    }

    private void OnStateChanged(object? sender, ScriptJobState newState) => InvokeAsync(this.StateHasChanged);

    private string GetIcon()
    {
        return MudIconMap[Job.State];
    }

    private MudBlazor.Color GetColor()
    {
        return MudColorMap[Job.State];
    }

    public void Dispose()
    {
        Job.StateChanged -= OnStateChanged;
    }
}
