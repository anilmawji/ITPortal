@using ITPortal.Lib.Automation.Script

@* Cannot use two-way binding since Parameter.Value is an 'object' that has its type assigned at runtime *@
@if (ScriptParameter.IsType(typeof(string)))
{
    <div class="input-line">
        <MudTextField T="string" Label=@ParameterName Lines=@GetNumLinesInTextField() Variant="Variant.Filled" Margin="Margin.Dense"
                      Required=@ScriptParameter.IsMandatory Text=@((string)ScriptParameter.Value) TextChanged="(text) => ScriptParameter.Value = text"
                      OnlyValidateIfDirty="true" RequiredError=@RequiredError />
    </div>
}
else if (ScriptParameter.IsType(typeof(int)))
{
    <div class="small-input-line">
        <MudNumericField T="int" Label=@ParameterName Variant="Variant.Filled" Margin="Margin.Dense"
                         Required=@ScriptParameter.IsMandatory Value=@((int)ScriptParameter.Value) ValueChanged="(num) => ScriptParameter.Value = num"
                         OnlyValidateIfDirty="true" RequiredError=@RequiredError />
    </div>
}
else if (ScriptParameter.IsBinaryType())
{
    <div class="small-input-line">
        <MudSwitch T="bool" Label=@ParameterName Required=@ScriptParameter.IsMandatory Color="Color.Secondary"
                   Checked=@((bool)ScriptParameter.Value) CheckedChanged="(checkedValue) => ScriptParameter.Value = checkedValue"
                   RequiredError=@RequiredError />
    </div>
}
else if (ScriptParameter.IsType(typeof(DateTime)))
{
    // No need to explicitly update "date" since it references Parameter.Value which is being updated every time the date changes
    DateTime date = (DateTime)ScriptParameter.Value;
    TimeSpan time = date.TimeOfDay;

    <div class="small-input-line mud-date">
        <MudDatePicker Label=@ParameterName Variant="Variant.Filled" Margin="Margin.Dense" Required=@ScriptParameter.IsMandatory
                       PickerVariant="PickerVariant.Inline" Date=@date
                       DateChanged="(newDate) => {
                           if (newDate != null)
                           {
                               ScriptParameter.Value = ((DateTime)newDate).Date.Add(time);
                           }
                       }"
                       RequiredError=@RequiredError />

        <MudTimePicker Label=@ParameterName Variant="Variant.Filled" Margin="Margin.Dense" AmPm="true" Time=@time
                       TimeChanged="(newTime) => {
                           if (newTime != null)
                           {
                               time = (TimeSpan)newTime;
                               ScriptParameter.Value = date.Date.Add(time);
                           }
                       }"
                       RequiredError=@RequiredError />
    </div>
}
else if (ScriptParameter.IsType(typeof(string[])))
{
    <div class="input-line">
        <MudExtensions.MudChipField T="string" Label=@ParameterName Margin="Margin.Dense"
                                    Values=@((List<string>)ScriptParameter.Value) Delimiter=@Delimiter FullWidth="true" ChipColor="Color.Default"
                                    ChipVariant="Variant.Text" ChipSize="Size.Medium" WrapChips="true" ChipsMaxWidth=@ChipsMaxWidth Closeable="true"
                                    Variant="Variant.Filled" OnlyValidateIfDirty="true"
                                    Validation="@(new Func<string, IEnumerable<string>>(ValidateArray))" />
    </div>
}
else if (ScriptParameter.IsType(typeof(int[])))
{
    <div class="input-line">
        <MudExtensions.MudChipField T="int" Label=@ParameterName Margin="Margin.Dense" Required=@ScriptParameter.IsMandatory
                                    Values=@((List<string>)ScriptParameter.Value) Delimiter=@Delimiter FullWidth="true" ChipColor="Color.Default"
                                    ChipVariant="Variant.Text" ChipSize="Size.Medium" WrapChips="true" ChipsMaxWidth=@ChipsMaxWidth Closeable="true"
                                    Variant="Variant.Filled" OnlyValidateIfDirty="true" RequiredError=@RequiredError
                                    Validation="@(new Func<int, IEnumerable<string>>(ValidateArray))" />
    </div>
}
else if (ScriptParameter.IsType(typeof(bool[])))
{
    <div class="input-line">
        <MudExtensions.MudChipField T="bool" Label=@ParameterName Margin="Margin.Dense" Required=@ScriptParameter.IsMandatory
                                    Values=@((List<string>)ScriptParameter.Value) Delimiter=@Delimiter FullWidth="true" ChipColor="Color.Default"
                                    ChipVariant="Variant.Text" ChipSize="Size.Medium" WrapChips="true" ChipsMaxWidth=@ChipsMaxWidth Closeable="true"
                                    Variant="Variant.Filled" OnlyValidateIfDirty="true" RequiredError=@RequiredError
                                    Validation="@(new Func<bool, IEnumerable<string>>(ValidateArray))" />
    </div>
}
else
{
    <p>Parameter @ParameterName uses an unsupported data type.</p>
}

@code {
    [Parameter, EditorRequired]
    public ScriptParameter ScriptParameter { get; set; } = null!;
}
