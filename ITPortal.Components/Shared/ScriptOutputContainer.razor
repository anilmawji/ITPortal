@implements IDisposable

@if (ScriptOutput != null)
{
    <div class="scroll output-container">
        @for (int i = 0; i < ScriptOutput.Get().Count; i++)
        {
            ScriptOutputMessage message = ScriptOutput.Get().ElementAt(i);

            <div class="output-message" style="color:@message.StreamType.GetColor()">
                @(message.Data)
            </div>
        }
    </div>
}

@code {
    [Parameter, EditorRequired]
    public ScriptOutputList? ScriptOutput { get; set; }

    protected override void OnInitialized()
    {
        if (ScriptOutput != null)
        {
            ScriptOutput.OnOutputChanged += (object? sender, ScriptOutputChangedEventArgs _) =>
            {
                InvokeAsync(() => this.StateHasChanged());
            };
        }
    }

    public void Dispose()
    {
        ScriptOutput?.DisposeOnOutputChangedEventSubscriptions();
    }
}
